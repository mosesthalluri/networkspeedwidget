Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Create the form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Network Speed"
$form.Size = New-Object System.Drawing.Size(100, 30)
$form.StartPosition = "Manual"
$form.TopMost = $true
$form.FormBorderStyle = "None"
$form.ShowInTaskbar = $true
$form.BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)

# Get screen dimensions
$screen = [System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea
$form.Location = New-Object System.Drawing.Point(($screen.Right - $form.Width - 200), ($screen.Bottom - $form.Height))

# Create label
$label = New-Object System.Windows.Forms.Label
$label.Location = New-Object System.Drawing.Point(0, 0)
$label.Size = $form.Size
$label.Font = New-Object System.Drawing.Font("Segoe UI", 8)
$label.ForeColor = [System.Drawing.Color]::White
$label.TextAlign = "MiddleCenter"
$form.Controls.Add($label)

# Function to format bytes
function Format-Speed {
    param ([double]$bytesPerSec)
    
    if ($bytesPerSec -ge 1GB) {
        return "{0:N1}G" -f ($bytesPerSec / 1GB)
    } elseif ($bytesPerSec -ge 1MB) {
        return "{0:N1}M" -f ($bytesPerSec / 1MB)
    } elseif ($bytesPerSec -ge 1KB) {
        return "{0:N1}K" -f ($bytesPerSec / 1KB)
    } else {
        return "{0:N0}B" -f $bytesPerSec
    }
}

# Variables for speed calculation
$lastReceivedBytes = 0
$lastSentBytes = 0

# Timer for updating speeds
$timer = New-Object System.Windows.Forms.Timer
$timer.Interval = 1000

$timer.Add_Tick({
    try {
        # Get active network adapter
        $adapter = Get-NetAdapter | Where-Object {
            $_.Status -eq "Up" -and 
            $_.Name -notlike "*Loopback*" -and 
            $_.Name -notlike "*VMware*"
        } | Select-Object -First 1

        if ($adapter) {
            $stats = $adapter | Get-NetAdapterStatistics
            
            # Calculate speeds
            $receivedSpeed = ($stats.ReceivedBytes - $lastReceivedBytes)
            $sentSpeed = ($stats.SentBytes - $lastSentBytes)
            
            # Update last values
            $script:lastReceivedBytes = $stats.ReceivedBytes
            $script:lastSentBytes = $stats.SentBytes
            
            # Format and display speeds
            $downSpeed = Format-Speed $receivedSpeed
            $upSpeed = Format-Speed $sentSpeed
            $label.Text = "↓$downSpeed ↑$upSpeed"
        } else {
            $label.Text = "No network"
        }
    } catch {
        $label.Text = "Error"
    }
})

# Right-click menu for exit
$contextMenu = New-Object System.Windows.Forms.ContextMenuStrip
$exitMenuItem = $contextMenu.Items.Add("Exit")
$exitMenuItem.Add_Click({
    $timer.Stop()
    $form.Close()
})
$form.ContextMenuStrip = $contextMenu

# Allow dragging
$form.Add_MouseDown({
    if ($_.Button -eq [System.Windows.Forms.MouseButtons]::Left) {
        $script:dragging = $true
        $script:offset = New-Object System.Drawing.Point($_.X, $_.Y)
    }
})

$form.Add_MouseMove({
    if ($script:dragging) {
        $newLocation = $form.PointToScreen([System.Drawing.Point]::new($_.X - $script:offset.X, $_.Y - $script:offset.Y))
        $form.Location = $newLocation
    }
})

$form.Add_MouseUp({
    $script:dragging = $false
})

# Start the timer
$timer.Start()

# Show the form
[void]$form.ShowDialog()
